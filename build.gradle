plugins {    
    id 'application'
    id 'java'
    id 'eclipse'
}
 
repositories {
    mavenCentral()
}

application {
    mainClass = 'Main'
} 

dependencies {
 
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
 
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
 
}
 
test {
    testLogging {
        exceptionFormat = 'full'
        events 'FAILED', 'SKIPPED', 'PASSED'
        showStandardStreams = true
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }
    }
    useJUnitPlatform()
}
 
eclipse {
  classpath {
    // see https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html
    downloadSources = true
    downloadJavadoc = true
  }
}
 
/* handle non existing source folders*/
def eclipseSourceFolders=[
    'src/main/java',
    'src/main/resources',
    'src/test/java',
    'src/test/resources'
];
tasks.eclipse.dependsOn << {
 
    for (String sourceFolder: eclipseSourceFolders){
        def resourceDir = new File(project.projectDir, sourceFolder)
        /* try to create folder when not existing */
        if( !resourceDir.exists() && ! resourceDir.mkdirs() ) {
            logger.info("Not able to create %1",resourceDir);
        }
    }
}
